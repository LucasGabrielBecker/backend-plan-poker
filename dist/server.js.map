{
  "version": 3,
  "sources": ["../src/server.ts"],
  "sourcesContent": ["import { Server } from 'socket.io'\nimport express, { Request, Response } from 'express'\nimport { createServer } from 'http'\nimport { CronJob } from 'cron'\nconst app = express()\nconst PORT = process.env.PORT || 5000\nimport cors from 'cors'\nimport EVENTS from './eventsEnum'\nimport { v4 } from 'uuid'\nimport mongoose from 'mongoose'\nimport { Card, Room } from './Schemas'\nimport {\n\tgetCards,\n\tregister,\n\tgetConnectedClients,\n\tsetVotingCard,\n\tnotifyUserDisconnect,\n\thandleVote,\n\tparseConnectedClients\n} from './handlers'\nimport { SocketType } from './types'\n\nconst server = createServer(app)\nconst io = new Server(server, {\n\tcors: {\n\t\torigin: '*'\n\t}\n})\n\nlet disconnectedList = []\nconst RUN_EACH_10_SECONDS = '*/10 * * * * *'\n\n// new CronJob(\n// \tRUN_EACH_10_SECONDS,\n// \tfunction () {\n// \t\tif (!disconnectedList.length) return\n// \t\tconsole.log(disconnectedList)\n// \t\tconst users = parseConnectedClients()\n\n// \t\tfor (const id of disconnectedList) {\n// \t\t\tconst user = users.find(u => u.socketId === id)\n// \t\t\tif (!user) return\n// \t\t\tio.emit(EVENTS.USER_DISCONNECTED, user)\n// \t\t}\n\n// \t\tconsole.log('notifyusers disconnected rodou')\n// \t},\n// \tnull,\n// \ttrue,\n// \t'America/Los_Angeles'\n// ).start()\n\napp.use(cors())\napp.use(express.json())\napp.get('/', async (res: Response): Promise<Response> => {\n\treturn res.status(200).send({ status: 'ok' })\n})\n\napp.post('/rooms/create', async (req: Request, res: Response) => {\n\tconst { cards } = req.body\n\n\ttry {\n\t\tlet newCards = null\n\t\tif (cards) {\n\t\t\tnewCards = await Card.create(cards)\n\t\t}\n\n\t\tconst cardsIds = newCards?.map(card => card._id || '')\n\n\t\tconst roomId = v4()\n\t\tconst newRoom = await Room.create({ name: roomId, cards: cardsIds ?? [] })\n\t\tawait newRoom.populate('cards')\n\n\t\treturn res\n\t\t\t.status(201)\n\t\t\t.send({ ok: true, msg: 'Sala criada com sucesso!', room: newRoom })\n\t} catch (error) {\n\t\tconst err = error.message || error\n\t\tconsole.error(err)\n\t\treturn res.status(409).send({ ok: false, msg: err })\n\t}\n})\n\napp.get('/rooms', async (req, res) => {\n\ttry {\n\t\tconst rooms = await Room.find({})\n\n\t\treturn res.status(200).send({ ok: true, rooms })\n\t} catch (error) {\n\t\treturn res.status(404).send({ ok: false, msg: error.message || error })\n\t}\n})\n\napp.get('/check_room/:roomid', async (req, res) => {\n\tconst roomId = req.params.roomid\n\tconst room = await Room.findOne({ name: roomId })\n\n\tif (!room) {\n\t\treturn res.status(404).send({\n\t\t\tok: false,\n\t\t\tmsg: 'Esta sala n\u00E3o existe, verifique o c\u00F3digo inserido.'\n\t\t})\n\t}\n\treturn res.status(200).send({ ok: true, msg: 'Sala existe' })\n})\n\napp.get('/rooms/:roomid', async (req, res) => {\n\tconst roomid = req.params.roomid\n\tconst room = await Room.findOne({ name: roomid })\n\t\t.populate('cards', ['title', 'description', 'createdAt'])\n\t\t.select('-__v')\n\tconst connectedClients = getConnectedClients()\n\n\tif (!room) {\n\t\treturn res.status(404).send({\n\t\t\tok: false,\n\t\t\tmsg: 'Sala nao encontrada'\n\t\t})\n\t}\n\treturn res.status(200).send({ ok: true, room, connectedClients })\n})\n\nio.on('connection', (socket: SocketType) => {\n\tsocket.on(EVENTS.GET_CARDS, payload => {\n\t\tgetCards(io)\n\t})\n\n\tsocket.on(EVENTS.REGISTER, payload => {\n\t\tregister(io, { ...payload, socketId: socket.id })\n\t})\n\n\tsocket.on(EVENTS.GET_CONNECTED_CLIENTS, () => {\n\t\tconst clients = getConnectedClients()\n\t})\n\n\tsocket.on(EVENTS.SET_VOTING_CARD, async payload => {\n\t\tconsole.log(payload)\n\t\tsetVotingCard(io, payload)\n\t})\n\n\tsocket.on(EVENTS.VOTE, payload => {\n\t\thandleVote(io, payload)\n\t})\n\n\tsocket.on(EVENTS.SHOW_VOTES, () => {\n\t\tio.emit(EVENTS.NOTIFY_SHOW_VOTES)\n\t})\n\n\tsocket.on('disconnect', () => {\n\t\tconst disconnectedUser = notifyUserDisconnect(socket.id)\n\t\tif (disconnectedUser) disconnectedList.push(disconnectedUser.id)\n\t})\n})\n\nserver.listen(PORT, async () => {\n\ttry {\n\t\tawait mongoose.connect(\n\t\t\t`mongodb+srv://${process.env.DB_USERNAME}:${process.env.DB_PASSWORD}@cluster0.78anz.mongodb.net/plan-poker?retryWrites=true&w=majority`\n\t\t)\n\t\tconsole.log('DB Connected')\n\t\tconsole.log('Server hosted on port: ', PORT)\n\t} catch (e) {\n\t\tconsole.log(e)\n\t\tprocess.exit(1)\n\t}\n})\n"],
  "mappings": "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",
  "names": []
}
